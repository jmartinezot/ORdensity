Process:

To parallelize:

library(foreach)
library(bigstatsr)

example parallelizing:

library(foreach)
nproc <- parallel::detectCores()
cl <- parallel::makeCluster(nproc)
doParallel::registerDoParallel(cl)
a <- foreach(i = 1:3, .combine = 'c') %dopar% {
  sqrt(i)
}
parallel::stopCluster(cl)

To generate documentation:

setwd('/home/otzeta/Github/findDE/')
devtools::document() 

Remove the package from the current installation using

sudo R

remove.packages('findDE')

install again doing

sudo R

library('devtools')
install_github('jmartinezot/findDE')
library('findDE')

installing from local source

remove.packages('findDE')
install.packages("/home/otzeta/Github/findDE", repos = NULL, type = "source")
library('findDE')

remove all variables in environment

rm(list=ls())

initialize a findDE object
x <- example[, 3:32]
y <- example[, 33:62]
positive <- as.matrix(x)
negative <- as.matrix(y)
randomA <- matrix(rnorm(30*100), nrow = 100)
randomB <- matrix(rnorm(30*100), nrow = 100)
myfindDE <- new("findDE", positive = positive, negative = negative, parallel = TRUE)
out <- myfindDE@out
#res <- as.data.frame(out$res)
#res[order(res$OR, decreasing = TRUE),]
char <- myfindDE@char
myclust <- findDEgenes(myfindDE)
result <- findDEgenes(myfindDE)
# myfindDE <- new("findDE", positive = randomA, negative = randomB)

summaries(myfindDE)
plotFPvsOR(myfindDE)
plotclusters(myfindDE)
clusplotk(myfindDE, 2)
clusplotk(myfindDE, 4)

let us see what it contains
myfindDE@positive
myfindDE@negative
myfindDE@.out # this has to be empty

initialize the .out field
myfindDE <- compute.findDE(myfindDE)
out <- myfindDE@.out

out$summary
OR <- out$summary[, "OR"]
FP <- out$summary[, "mediaFP"] # Aldatu izena
dFP <- out$summary[, "density"]
plot(FP, OR, type="n")
points(FP, OR, cex=1/(0.5+dFP))

library(cluster)
char <- data.frame(OR, FP, dFP)
s <- rep(NA, 10)
for (k in 2:10)
{
  aux <- pam(dist(scale(char)), k)
  s[k] <- mean(silhouette(aux)[, "sil_width"])
}
plot(s, type="b", ylim=c(0,1))

# Try 2, 3, and 4 clusters
k <- 4
clustering <- pam(dist(scale(char)), k)$clustering
by(char, clustering, summary)

veryimportant <- out$summary[clustering==1, "id"]
table(dat$DEgen[veryimportant])
table( dat$gap[veryimportant])
important <- out$summary[clustering==2, "id"]
table(dat$DEgen[important])
table( dat$gap[important])
doubtfull <- out$summary[clustering==3, "id"]
table(dat$DEgen[doubtfull])
table( dat$gap[doubtfull])
nonimportant <- out$summary[clustering==4, "id"]
table(dat$DEgen[nonimportant])

clustering <- pam(dist(scale(char)), 2)$clustering
veryimportant <- out$summary[clustering==1, "id"]
table(dat$DEgen[veryimportant])
table( dat$gap[veryimportant])
nonimportant <- out$summary[clustering==2, "id"]
table(dat$DEgen[nonimportant])


aa <- pam(dist(scale(char)), 2)
clusplot(aa)
aa <- pam(dist(scale(char)), 4)
ama <- clusplot(aa)
aux <- prcomp(char, scale=TRUE)
x <- aux$x[, 1:2]
getAnywhere(clusplot.default)

library(foreach)
nproc <- parallel::detectCores()
cl <- parallel::makeCluster(nproc)
doParallel::registerDoParallel(cl)
a <- foreach(i = 1:3, .combine = 'c') %dopar% {
  # sqrt(i)
  l <- list()
  m <- matrix(1:50, nrow=10)
  l[[1]] <- m
  l[[2]] <- 14
  l
}
parallel::stopCluster(cl)


check_complexity <- function(n) {
	m <<- matrix(runif(n*3, min = -2, max = 2), nrow=n)
	print(system.time(D0 <<- as.matrix(dist(m))))
	print(system.time(vgR0 <<- median(D0^2)/2))
	print(system.time(I <<- apply(D0, 1,  IindexRobust, vg=vgR0)))
	print(system.time(1/I))
}

format(object.size(D0), units = "GB", standard = "SI")

> check_complexity(10000)
   user  system elapsed 
  4.821   0.850   5.670 
   user  system elapsed 
  2.523   0.471   2.994 
   user  system elapsed 
  5.146   0.218   5.363 
   user  system elapsed 
  0.000   0.000   0.001 
> format(object.size(D0), units = "MB", standard = "SI")
[1] "801.1 MB"
> check_complexity(20000)
   user  system elapsed 
 22.440  10.824 938.224 
   user  system elapsed 
 11.102   3.018 128.688 
    user   system  elapsed 
  24.326   20.705 1740.560 
   user  system elapsed 
      0       0       0 
> format(object.size(D0), units = "MB", standard = "SI")
[1] "3202.2 MB"

library(gpuR)

check_complexity_GPU <- function(n) {
	m <<- matrix(runif(n*3, min = -2, max = 2), nrow=n)
	gpum <<- gpuMatrix(m, type="double")
	print(system.time(D0 <<- as.matrix(dist(gpum))))
	print(system.time(vgR0 <<- median(D0^2)/2))
	# print(system.time(I <<- apply(D0, 1,  IindexRobust, vg=vgR0)))
	# print(system.time(1/I))
}

veryimportant <- out$summary[clustering==1, "id"]
table(dat$DEgen[veryimportant])
table( dat$gap[veryimportant])
important <- out$summary[clustering==2, "id"]
table(dat$DEgen[important])
table( dat$gap[important])
doubtfull <- out$summary[clustering==3, "id"]
table(dat$DEgen[doubtfull])
table( dat$gap[doubtfull])
nonimportant <- out$summary[clustering==4, "id"]
table(dat$DEgen[nonimportant])

clustering <- pam(dist(scale(char)), 2)$clustering
veryimportant <- out$summary[clustering==1, "id"]
table(dat$DEgen[veryimportant])
table( dat$gap[veryimportant])
nonimportant <- out$summary[clustering==2, "id"]
table(dat$DEgen[nonimportant])


out <- myfindDE@out
clustering2 <- myfindDE@clustering2
veryimportant <- out$summary[clustering2==1, "id"]
table(example$DEgen[veryimportant])
table(example$gap[veryimportant])
nonimportant <- out$summary[clustering2==2, "id"]
table(example$DEgen[nonimportant])
table(example$gap[nonimportant])

clustering4 <- myfindDE@clustering4
veryimportant <- out$summary[clustering4==1, "id"]
table(example$DEgen[veryimportant])
table(example$gap[veryimportant])
important <- out$summary[clustering4==2, "id"]
table(example$DEgen[important])
table(example$gap[important])
doubtful <- out$summary[clustering4==3, "id"]
table(example$DEgen[doubtful])
table(example$gap[doubtful])
nonimportant <- out$summary[clustering4==4, "id"]
table(example$DEgen[nonimportant])
table(example$gap[nonimportant])

